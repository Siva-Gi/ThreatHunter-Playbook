title: Alternate PowerShell Hosts
id: WIN-190610201010
collaborators:
  - '@Cyb3rWard0g'
  - '@Cyb3rPandaH'
playbooks_related:
  - WIN-190410151110
creation_date: 2019/08/15
modification_date: 2020/09/20
platform: Windows
attack_mappings:
  - tactics:
      - TA0002
    technique: T1059
    sub_technique: "001"
hypothesis: Adversaries might be leveraging alternate PowerShell Hosts to execute PowerShell evading traditional PowerShell detections that look for powershell.exe in my environment.
technical_context:
offensive_tradecraft: |-
  Adversaries can abuse alternate signed PowerShell Hosts to evade application whitelisting solutions that block powershell.exe and naive logging based upon traditional PowerShell hosts.
  Characteristics of a PowerShell host (Matt Graeber @mattifestation) >
  * These binaries are almost always C#/.NET .exes/.dlls
  * These binaries have System.Management.Automation.dll as a referenced assembly
  * These may not always be “built in” binaries
test_data:
  metadata: https://mordordatasets.com/notebooks/small/windows/02_execution/SDWIN-190518211456.html
  link: https://raw.githubusercontent.com/OTRF/mordor/master/datasets/small/windows/lateral_movement/host/empire_psremoting_stager.zip
analytics:
  - name: Analytic I
    description: Within the classic PowerShell log, event ID 400 indicates when a new PowerShell host process has started. Excluding PowerShell.exe is a good way to find alternate PowerShell hosts
    data_sources:
      - name: Powershell
        event_providers:
        - name: Windows PowerShell
          data_model:
            - relationship: Application host started
              id: 489EB588-AF22-4981-BBE9-B2662260B4E9
              event_id: 400
        - name: Microsoft-Windows-PowerShell/Operational
          data_model:
            - relationship: User started Application host
              id: A8429FAF-D8F2-435E-A45F-01DAE7B1FCDD
              event_id: 4103
    logic: |-
      SELECT `@timestamp`, Hostname, Channel
      FROM mordorTable
      WHERE (Channel = "Microsoft-Windows-PowerShell/Operational" OR Channel = "Windows PowerShell")
          AND (EventID = 400 OR EventID = 4103)
          AND NOT Message LIKE "%Host Application%powershell%"
  - name: Analytic II
    description: Looking for processes loading a specific PowerShell DLL is a very effective way to document the use of PowerShell in your environment
    data_sources:
      - name: Module
        event_providers:
        - name: Microsoft-Windows-Sysmon/Operational
          data_model:
            - relationship: Process loaded Dll
              id: 109A870F-84A2-4CE4-948A-4773CD283F76
              event_id: 7
    logic: |-
      SELECT `@timestamp`, Hostname, Image, Description
      FROM mordorTable
      WHERE Channel = "Microsoft-Windows-Sysmon/Operational"
          AND EventID = 7
          AND (lower(Description) = "system.management.automation" OR lower(ImageLoaded) LIKE "%system.management.automation%")
          AND NOT Image LIKE "%powershell.exe"
  - name: Analytic III
    description: Monitoring for PSHost* pipes is another interesting way to find other alternate PowerShell hosts in your environment.
    data_sources:
      - name: Named pipe
        event_providers:
        - name: Microsoft-Windows-Sysmon/Operational
          data_model:
            - relationship: Process created Pipe
              id: 46DB1AB1-E327-4173-9A39-F6877A9C6189
              event_id: 17
    logic: |-
      SELECT `@timestamp`, Hostname, Image, PipeName
      FROM mordorTable
      WHERE Channel = "Microsoft-Windows-Sysmon/Operational"
          AND EventID = 17
          AND lower(PipeName) LIKE "\\\pshost%"
          AND NOT Image LIKE "%powershell.exe"
known_bypasses:
false_positives:
additional_notes: |-
  * Explore the data produced in your lab environment with the analytics above and document what normal looks like from alternate powershell hosts. Then, take your findings and explore your production environment.
  * You can also run the script below named PowerShellHostFinder.ps1 by Matt Graber and audit PS host binaries in your environment.
research_output:
  - type: Sigma Rule
    link: https://github.com/OTRF/ThreatHunter-Playbook/tree/master/signatures/sigma/powershell_alternate_powershell_hosts.yml
  - type: Sigma Rule
    link: https://github.com/OTRF/ThreatHunter-Playbook/tree/master/signatures/sigma/sysmon_alternate_powershell_hosts_moduleload.yml
  - type: Sigma Rule
    link: https://github.com/OTRF/ThreatHunter-Playbook/tree/master/signatures/sigma/sysmon_alternate_powershell_hosts_pipe.yml
references: |-
  * https://twitter.com/mattifestation/status/971840487882506240
  * https://gist.githubusercontent.com/mattifestation/fcae777470f1bdeb9e4b32f93c245fd3/raw/abbe79c660829ab9aad58581baf681655f6ba305/PowerShellHostFinder.ps1
