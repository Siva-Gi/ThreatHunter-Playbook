title: WMI Eventing
id: WIN-190810170510
collaborators:
  - '@Cyb3rWard0g'
  - '@Cyb3rPandaH'
playbooks_related:
creation_date: 2019/08/10
modification_date: 2020/09/20
platform: Windows
attack_mappings:
  - tactics:
      - TA0003
    technique: T1546
    sub_technique: "003"
hypothesis: Adversaries might be leveraging WMI eventing for persistence in my environment.
technical_context: |-
  WMI is the Microsoft implementation of the Web-Based Enterprise Management (WBEM) and Common Information Model (CIM). Both standards aim to provide an industry-agnostic means of collecting and transmitting information related to any managed component in an enterprise.
  An example of a managed component in WMI would be a running process, registry key, installed service, file information, etc.
  At a high level, Microsoft’s implementation of these standards can be summarized as follows > Managed Components Managed components are represented as WMI objects — class instances representing highly structured operating system data. Microsoft provides a wealth of WMI objects that communicate information related to the operating system. E.g. Win32_Process, Win32_Service, AntiVirusProduct, Win32_StartupCommand, etc.
offensive_tradecraft: |-
  From an offensive perspective WMI has the ability to trigger off nearly any conceivable event, making it a good technique for persistence.
  
  Three requirements
  * Filter – An action to trigger off of
  * Consumer – An action to take upon triggering the filter
  * Binding – Registers a FilterConsumer
test_data:
  metadata: https://mordordatasets.com/notebooks/small/windows/03_persistence/SDWIN-190518184306.html
  link: https://raw.githubusercontent.com/OTRF/mordor/master/datasets/small/windows/persistence/host/empire_wmi_local_event_subscriptions_elevated_user.zip
analytics:
  - name: Analytic I
    description: Look for WMI event filters registered
    data_sources:
      - name: WMI object
        event_providers:
        - name: Microsoft-Windows-Sysmon/Operational
          data_model:
            - relationship: User created Wmi filter
              id: AE378A1D-E665-461A-B478-539AFB5E37EF
              event_id: 19
    logic: |-
      SELECT `@timestamp`, Hostname, User, EventNamespace, Name, Query
      FROM mordorTable
      WHERE Channel = "Microsoft-Windows-Sysmon/Operational"
          AND EventID = 19
  - name: Analytic II
    description: Look for WMI event consumers registered
    data_sources:
      - name: WMI object
        event_providers:
        - name: Microsoft-Windows-Sysmon/Operational
          data_model:
            - relationship: User created Wmi consumer
              id: B5CD1D3E-3947-453B-ADEA-896A8F110A64
              event_id: 20
    logic: |-
      SELECT `@timestamp`, Hostname, User, Name, Type, Destination
      FROM mordorTable
      WHERE Channel = "Microsoft-Windows-Sysmon/Operational"
          AND EventID = 20
  - name: Analytic III
    description: Look for WMI consumers binding to filters
    data_sources:
      - name: WMI object
        event_providers:
        - name: Microsoft-Windows-Sysmon/Operational
          data_model:
            - relationship: User created Wmi subscription
              id: 73A84308-955C-43E7-B882-81EA1C8092D4
              event_id: 21
    logic: |-
      SELECT `@timestamp`, Hostname, User, Operation, Consumer, Filter
      FROM mordorTable
      WHERE Channel = "Microsoft-Windows-Sysmon/Operational"
          AND EventID = 21
  - name: Analytic IV
    description: Look for events related to the registration of FilterToConsumerBinding
    data_sources:
      - name: WMI object
        event_providers:
        - name: Microsoft-Windows-WMI-Activity/Operational
          data_model:
            - relationship: Wmi subscription created
              id: F3B6DD23-4DBE-4214-A2D7-10E7103D815F
              event_id: 5861
    logic: |-
      SELECT `@timestamp`, Hostname, Message
      FROM mordorTable
      WHERE Channel = "Microsoft-Windows-WMI-Activity/Operational"
          AND EventID = 5861
known_bypasses:
false_positives:
additional_notes:
research_output:
references: |-
  * https://www.blackhat.com/docs/us-15/materials/us-15-Graeber-Abusing-Windows-Management-Instrumentation-WMI-To-Build-A-Persistent%20Asynchronous-And-Fileless-Backdoor.pdf
  * https://twitter.com/mattifestation/status/899646620148539397
  * https://www.darkoperator.com/blog/2017/10/14/basics-of-tracking-wmi-activity
