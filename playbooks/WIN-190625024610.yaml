title: SysKey Registry Keys Access
id: WIN-190625024610
collaborators:
  - '@Cyb3rWard0g'
  - '@Cyb3rPandaH'
playbooks_related:
creation_date: 2019/06/25
modification_date: 2020/09/20
platform: Windows
attack_mappings:
  - tactics:
      - TA0007
    technique: T1012
    sub_technique: None
hypothesis: Adversaries might be calculating the SysKey from registry key values to decrypt SAM entries
technical_context: |-
  Every computer that runs Windows has its own local domain; that is, it has an account database for accounts that are specific to that computer.
  Conceptually,this is an account database like any other with accounts, groups, SIDs, and so on. These are referred to as local accounts, local groups, and so on.
  Because computers typically do not trust each other for account information, these identities stay local to the computer on which they were created.
offensive_tradecraft: |-
  Adversaries might use tools like Mimikatz with lsadump::sam commands or scripts such as Invoke-PowerDump to get the SysKey to decrypt Security Account Mannager (SAM) database entries (from registry or hive) and get NTLM, and sometimes LM hashes of local accounts passwords.
  Adversaries can calculate the Syskey by using RegOpenKeyEx/RegQueryInfoKey API calls to query the appropriate class info and values from the HKLM:\SYSTEM\CurrentControlSet\Control\Lsa\JD, HKLM:\SYSTEM\CurrentControlSet\Control\Lsa\Skew1, HKLM:\SYSTEM\CurrentControlSet\Control\Lsa\GBG, and HKLM:\SYSTEM\CurrentControlSet\Control\Lsa\Data keys.
  
  Additional reading
  * https://github.com/OTRF/ThreatHunter-Playbook/tree/master/docs/library/windows/security_account_manager_database.md
  * https://github.com/OTRF/ThreatHunter-Playbook/tree/master/docs/library/windows/syskey.md
test_data:
  metadata: https://mordordatasets.com/notebooks/small/windows/06_credential_access/SDWIN-190625103712.html
  link: https://raw.githubusercontent.com/OTRF/mordor/master/datasets/small/windows/credential_access/host/empire_mimikatz_sam_access.zip
analytics:
  - name: Analytic I
    description: Look for handle requests and access operations to specific registry keys used to calculate the SysKey. SACLs are needed for them
    data_sources:
      - name: Windows registry
        event_providers:
        - name: Microsoft-Windows-Security-Auditing
          data_model:
            - relationship: Process accessed Windows registry key
              id: 91CBB928-CD58-46F7-90A8-E9B3C53D8269
              event_id: 4663
            - relationship: Process requested access Windows registry key
              id: 9DF48A52-109C-47E9-BA9B-B9C27CFCAACF
              event_id: 4656
    logic: |-
      SELECT `@timestamp`, ProcessName, ObjectName, AccessMask, EventID
      FROM mordorTable
      WHERE LOWER(Channel) = "security"
          AND (EventID = 4656 OR EventID = 4663)
          AND ObjectType = "Key"
          AND (
              lower(ObjectName) LIKE "%jd"
              OR lower(ObjectName) LIKE "%gbg"
              OR lower(ObjectName) LIKE "%data"
              OR lower(ObjectName) LIKE "%skew1"
          )
known_bypasses:
  - idea: |-
      Apparently the registry keys needed to calculate the SysKey are accessed by processes such as smss.exe, winlogon.exe and syskey.exe, but when the system boots. An adversary can migrate to those processes to blend in.
    playbook:
false_positives:
additional_notes: |-
  * An audit rule needs to be added to the SACL of the following keys to monitor for ReadKey rights
    * HKLM:\SYSTEM\CurrentControlSet\Control\Lsa\JD
    * HKLM:\SYSTEM\CurrentControlSet\Control\Lsa\Skew1
    * HKLM:\SYSTEM\CurrentControlSet\Control\Lsa\GBG
    * HKLM:\SYSTEM\CurrentControlSet\Control\Lsa\Data
  * Defenders can correlate known processes accessing those registry keys with events that tell you when the system boots up.
  * Look for the same process accessing all those registry keys in a short period of time.
research_output:
  - type: Sigma Rule
    link: https://github.com/OTRF/ThreatHunter-Playbook/blob/master/signatures/sigma/win_syskey_registry_access.yml
references: |-
  * https://github.com/gentilkiwi/mimikatz/wiki/module-~-lsadump
  * https://adsecurity.org/?page_id=1821#LSADUMPSAM
  * http://www.harmj0y.net/blog/activedirectory/remote-hash-extraction-on-demand-via-host-security-descriptor-modification/
  * https://docs.microsoft.com/en-us/dotnet/api/system.security.accesscontrol.registryrights?view=netframework-4.8
  * https://docs.microsoft.com/en-us/windows/desktop/sysinfo/registry-key-security-and-access-rights
