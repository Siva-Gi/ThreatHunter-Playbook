title: WMI Module Load
id: WIN-190811201010
collaborators:
  - '@Cyb3rWard0g'
  - '@Cyb3rPandaH'
playbooks_related:
creation_date: 2019/08/11
modification_date: 2020/09/20
platform: Windows
attack_mappings:
  - tactics:
      - TA0002
    technique: T1047
    sub_technique: None
hypothesis: Adversaries might be leveraging WMI modules to execute WMI tasks bypassing controls monitoring for wmiprvse.exe or wmiapsrv.exe activity
technical_context: |-
  WMI is the Microsoft implementation of the Web-Based Enterprise Management (WBEM) and Common Information Model (CIM).
  Both standards aim to provide an industry-agnostic means of collecting and transmitting information related to any managed component in an enterprise. An example of a managed component in WMI would be a running process, registry key, installed service, file information, etc.
  At a high level, Microsoft’s implementation of these standards can be summarized as follows > Managed Components Managed components are represented as WMI objects — class instances representing highly structured operating system data. Microsoft provides a wealth of WMI objects that communicate information related to the operating system. E.g. Win32_Process, Win32_Service, AntiVirusProduct, Win32_StartupCommand, etc.
  WMI modules loaded by legit processes such as wmiprvse.exe or wmiapsrv.exe are the following

  C:\Windows\System32\wmiclnt.dll
  C:\Windows\System32\wbem\WmiApRpl.dll
  C:\Windows\System32\wbem\wmiprov.dll
  C:\Windows\System32\wbem\wmiutils.dll
offensive_tradecraft: |-
  Adversaries could leverage the WMI modules above to execute WMI tasks bypassing controls looking for wmiprvse.exe or wmiapsrv.exe activity.
test_data:
  metadata: https://mordordatasets.com/notebooks/small/windows/05_defense_evasion/SDWIN-190518200432.html
  link: https://raw.githubusercontent.com/OTRF/mordor/master/datasets/small/windows/defense_evasion/host/empire_psinject_PEinjection.zip
analytics:
  - name: Analytic I
    description: Look for processes (non wmiprvse.exe or WmiApSrv.exe) loading wmi modules
    data_sources:
      - name: Module
        event_providers:
        - name: Microsoft-Windows-Sysmon/Operational
          data_model:
            - relationship: Process loaded Dll
              id: 109A870F-84A2-4CE4-948A-4773CD283F76
              event_id: 7
    logic: |-
      SELECT `@timestamp`, Hostname, Image, ImageLoaded
      FROM mordorTable
      WHERE Channel = "Microsoft-Windows-Sysmon/Operational"
          AND EventID = 7
          AND (
              lower(ImageLoaded) LIKE "%wmiclnt.dll"
              OR lower(ImageLoaded) LIKE "%WmiApRpl.dll"
              OR lower(ImageLoaded) LIKE "%wmiprov.dll"
              OR lower(ImageLoaded) LIKE "%wmiutils.dll"
              OR lower(ImageLoaded) LIKE "%wbemcomn.dll"
              OR lower(ImageLoaded) LIKE "%WMINet_Utils.dll"
              OR lower(ImageLoaded) LIKE "%wbemsvc.dll"
              OR lower(ImageLoaded) LIKE "%fastprox.dll"
              OR lower(Description) LIKE "%wmi%"
          )
          AND NOT (
              lower(Image) LIKE "%wmiprvse.exe"
              OR lower(Image) LIKE "%wmiapsrv.exe"
              OR lower(Image) LIKE "%svchost.exe"
          )
known_bypasses:
false_positives:
additional_notes: |-
  * Stack the processes loading WMI modules and document the activity in your environment.
  * Stack child processes (if any) of non wmiprvse.exe loading wmi modules
research_output:
  - type: Sigma Rule
    link: https://github.com/OTRF/ThreatHunter-Playbook/blob/master/signatures/sigma/sysmon_wmi_module_load.yml
references: |-
  * https://posts.specterops.io/threat-hunting-with-jupyter-notebooks-part-4-sql-join-via-apache-sparksql-6630928c931e
  * https://posts.specterops.io/real-time-sysmon-processing-via-ksql-and-helk-part-3-basic-use-case-8fbf383cb54f
