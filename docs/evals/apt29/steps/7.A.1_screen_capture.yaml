vendor: OTR Community
step: 7.A.1
procedure: Captured and saved screenshots using PowerShell
criteria: powershell.exe executing the CopyFromScreen function from System.Drawing.dll
technique:
  name: Screen Capture
  id: T1113
issue: https://github.com/OTRF/detection-hackathon-apt29/issues/16
detections:
  - main_type: Telemetry
    modifier_type: Correlated
    description: powershell.exe loading System.Drawing.ni.dll, indicating possible Screen Capture. The event was correlated to a parent alert for Bypass User Account Control of control.exe spawning powershell.exe.
    reference:
    queries:
      - id: 3B4E5808-3C71-406A-B181-17B0CE3178C9
        data_sources:
          - event_provider: Microsoft-Windows-Sysmon/Operational
            event_logs:
              - 1
              - 7
        rule_contribution:
        logic: |
          SELECT Message
          FROM apt29Host f
          INNER JOIN (
              SELECT d.ProcessGuid, d.ParentProcessGuid
              FROM apt29Host d
              INNER JOIN (
                SELECT a.ProcessGuid, a.ParentProcessGuid
                FROM apt29Host a
                INNER JOIN (
                  SELECT ProcessGuid
                  FROM apt29Host
                  WHERE Channel = "Microsoft-Windows-Sysmon/Operational"
                      AND EventID = 1
                      AND LOWER(Image) LIKE "%control.exe"
                      AND LOWER(ParentImage) LIKE "%sdclt.exe"
                ) b
                ON a.ParentProcessGuid = b.ProcessGuid
                WHERE a.Channel = "Microsoft-Windows-Sysmon/Operational"
                  AND a.EventID = 1
                  AND a.IntegrityLevel = "High"
              ) c
              ON d.ParentProcessGuid= c.ProcessGuid
              WHERE d.Channel = "Microsoft-Windows-Sysmon/Operational"
                AND d.EventID = 1
                AND d.Image LIKE '%powershell.exe'
          ) e
          ON f.ProcessGuid = e.ProcessGuid
          WHERE f.Channel = "Microsoft-Windows-Sysmon/Operational"
              AND f.EventID = 7
              AND LOWER(f.ImageLoaded) LIKE "%system.drawing.ni.dll"
        output: |
          Image loaded:
          RuleName: -
          UtcTime: 2020-05-02 03:06:42.583
          ProcessGuid: {47ab858c-e374-5eac-d803-000000000400}
          ProcessId: 3852
          Image: C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe
          ImageLoaded: C:\Windows\assembly\NativeImages_v4.0.30319_64\System.Drawing\333e2b23be9a8210ee2068f514a332b9\System.Drawing.ni.dll
          FileVersion: 4.8.3752.0 built by: NET48REL1
          Description: .NET Framework
          Product: MicrosoftÂ® .NET Framework
          Company: Microsoft Corporation
          OriginalFileName: System.Drawing.dll
          Hashes: SHA1=388B289E2FD96234E2C1E8AE777248BE2C3D327B,MD5=30588BB4DCBF9940A1B1ECD68634F797,SHA256=346A6BD85291B7C4D2410F5FED216BA88320CAD014FC5543E0F60A5895F3B48D,IMPHASH=00000000000000000000000000000000
          Signed: false
          Signature: -
          SignatureStatus: Unavailable
  - main_type: Telemetry
    modifier_type: Correlated
    description: Telemetry showed powershell.exe executing CopyFromScreen from System.Drawing.dll. The event was correlated to a parent alert for Bypass User Account Control of control.exe spawning powershell.exe.
    reference:
    queries:
      - id: B374D3E7-3580-441F-8D6E-48C40CBA7922
        data_sources:
          - event_provider: Microsoft-Windows-Sysmon/Operational
            event_logs:
              - 1
          - event_provider: Microsoft-Windows-PowerShell/Operational
            event_logs:
              - 4103
        rule_contribution:
        logic: |
          SELECT Payload
          FROM apt29Host f
          INNER JOIN (
              SELECT d.ProcessId, d.ParentProcessId
              FROM apt29Host d
              INNER JOIN (
                SELECT a.ProcessGuid, a.ParentProcessGuid
                FROM apt29Host a
                INNER JOIN (
                  SELECT ProcessGuid
                  FROM apt29Host
                  WHERE Channel = "Microsoft-Windows-Sysmon/Operational"
                      AND EventID = 1
                      AND LOWER(Image) LIKE "%control.exe"
                      AND LOWER(ParentImage) LIKE "%sdclt.exe"
                ) b
                ON a.ParentProcessGuid = b.ProcessGuid
                WHERE a.Channel = "Microsoft-Windows-Sysmon/Operational"
                  AND a.EventID = 1
                  AND a.IntegrityLevel = "High"
              ) c
              ON d.ParentProcessGuid= c.ProcessGuid
              WHERE d.Channel = "Microsoft-Windows-Sysmon/Operational"
                AND d.EventID = 1
                AND d.Image LIKE '%powershell.exe'
          ) e
          ON f.ExecutionProcessID = e.ProcessId
          WHERE f.Channel = "Microsoft-Windows-PowerShell/Operational"
          AND f.EventID = 4103
          AND LOWER(f.Payload) LIKE "%copyfromscreen%"
        output: |
          CommandInvocation(Start-Job): "Start-Job"
          ParameterBinding(Start-Job): name="Name"; value="Screenshot"
          ParameterBinding(Start-Job): name="ScriptBlock"; value=" 
            Write-Host "`nJobPID`n------`n$PID"
            while($true){
                $RandomFileName = [System.IO.Path]::GetRandomFileName(); 
                $Filepath="$env:USERPROFILE\Downloads\$RandomFileName.bmp"; 
                Add-Type -AssemblyName System.Windows.Forms; 
                Add-type -AssemblyName System.Drawing; 
                $Screen = [System.Windows.Forms.SystemInformation]::VirtualScreen; 
                $Width = $Screen.Width; 
                $Height = $Screen.Height; 
                $Left = $Screen.Left; 
                $Top = $Screen.Top; 
                $bitmap = New-Object System.Drawing.Bitmap $Width, $Height; 
                $graphic = [System.Drawing.Graphics]::FromImage($bitmap); 
                $graphic.CopyFromScreen($Left, $Top, 0, 0, $bitmap.Size); 
                $bitmap.Save($Filepath); 
                Start-Sleep -Seconds 300
      - id: 2AA4D448-3893-4F31-9497-0F8E2B7E3CFD
        data_sources:
          - event_provider: Security
            event_logs:
              - 4688
          - event_provider: Microsoft-Windows-PowerShell/Operational
            event_logs:
              - 4104
        rule_contribution:
        logic: |
          SELECT Payload
          FROM apt29Host f
          INNER JOIN (
              SELECT split(d.NewProcessId, '0x')[1] as NewProcessId
              FROM apt29Host d
              INNER JOIN(
                SELECT a.ProcessId, a.NewProcessId
                FROM apt29Host a
                INNER JOIN (
                  SELECT NewProcessId
                  FROM apt29Host
                  WHERE LOWER(Channel) = "security"
                      AND EventID = 4688
                      AND LOWER(NewProcessName) LIKE "%control.exe"
                      AND LOWER(ParentProcessName) LIKE "%sdclt.exe"
                ) b
                ON a.ProcessId = b.NewProcessId
                WHERE LOWER(a.Channel) = "security"
                  AND a.EventID = 4688
                  AND a.MandatoryLabel = "S-1-16-12288"
                  AND a.TokenElevationType = "%%1937"
              ) c
              ON d.ProcessId = c.NewProcessId
              WHERE LOWER(d.Channel) = "security"
                AND d.EventID = 4688
                AND d.NewProcessName LIKE '%powershell.exe'
          ) e
          ON LOWER(hex(f.ExecutionProcessID)) = e.NewProcessId
          WHERE f.Channel = "Microsoft-Windows-PowerShell/Operational"
          AND f.EventID = 4103
          AND LOWER(f.Payload) LIKE "%copyfromscreen%"
        output: |
          CommandInvocation(Start-Job): "Start-Job"
          ParameterBinding(Start-Job): name="Name"; value="Screenshot"
          ParameterBinding(Start-Job): name="ScriptBlock"; value=" 
            Write-Host "`nJobPID`n------`n$PID"
            while($true){
                $RandomFileName = [System.IO.Path]::GetRandomFileName(); 
                $Filepath="$env:USERPROFILE\Downloads\$RandomFileName.bmp"; 
                Add-Type -AssemblyName System.Windows.Forms; 
                Add-type -AssemblyName System.Drawing; 
                $Screen = [System.Windows.Forms.SystemInformation]::VirtualScreen; 
                $Width = $Screen.Width; 
                $Height = $Screen.Height; 
                $Left = $Screen.Left; 
                $Top = $Screen.Top; 
                $bitmap = New-Object System.Drawing.Bitmap $Width, $Height; 
                $graphic = [System.Drawing.Graphics]::FromImage($bitmap); 
                $graphic.CopyFromScreen($Left, $Top, 0, 0, $bitmap.Size); 
                $bitmap.Save($Filepath); 
                Start-Sleep -Seconds 300
